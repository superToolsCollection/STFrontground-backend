syntax = "v1"

info(
	title: superTools-frontground-backend
	desc: supertools前台后端代码
	author: "super"
	email: "supeng842499467@gmail.com"
)

type (
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	LoginResp {
		Id       int64  `json:"id"`
		Username string `json:"username"`
		Mobile   string `json:"mobile"`
		Token    string `json:"token"`
	}
)

type (
	RegisterReq {
		Username string `json:"username"`
		Mobile   string `json:"mobile"`
		Password string `json:"password"`
	}

	RegisterResp {
		IsOK bool `json:"is_ok"`
	}
)

type UserReply {
	Id       int64  `json:"id"`
	Username string `json:"username"`
	Mobile   string `json:"mobile"`
	JwtToken
}

type JwtToken {
	AccessToken  string `json:"accessToken,omitempty"`
	AccessExpire int64  `json:"accessExpire,omitempty"`
	RefreshAfter int64  `json:"refreshAfter,omitempty"`
}

service backend-api {
	@handler ping
	post /user/ping ()
	
	@doc(
		summary: "用户注册"
	)
	@handler register
	post /user/register (RegisterReq)returns (RegisterResp)
	
	@doc(
		summary: "用户登陆"
	)
	@handler login
	post /user/login (LoginReq) returns (LoginResp)
}

type (
	MorseReq {
		Str string `json:"str"`
	}

	MorseResp {
		MorseStr string `json:"morse_str"`
	}
)

type (
	QrCodeReq {
		Str string `json:"str"`
	}

	QrCodeResp {
		QrCodeStr string `json:"qrcode_str"`
	}
)

type (
	Rgb2HexReq {
		Str string `json:"str"`
	}

	Rgb2HexResp {
		Rgb2HexStr string `json:"rgb2hex_str"`
	}
)

@server(
	jwt: Auth
	middleware: Usercheck
)
service backend-api{
	@doc(
		summary: "用户信息"
	)
	@handler userInfo
	get /user/info () returns (UserReply)
	
	@doc(
		summary: "生成morse码"
	)
	@handler morse
	get /api/v1/morse (MorseReq) returns (MorseResp)
	
	@doc(
		summary: "生成二维码"
	)
	@handler qrcode
	get /api/v1/qrcode (QrCodeReq) returns (QrCodeResp)
	
	@doc(
		summary: "rgb转hex"
	)
	@handler rgb2hex
	get /api/v1/rgb2hex (Rgb2HexReq) returns (Rgb2HexResp)
}