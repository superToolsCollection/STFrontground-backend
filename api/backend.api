syntax = "v1"

info(
	title: superTools-frontground-backend
	desc: supertools前台后端代码
	author: "super"
	email: "supeng842499467@gmail.com"
)

type (
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	LoginResp {
		Id       int64  `json:"id"`
		Username string `json:"username"`
		JwtToken
	}
)

type (
	RegisterReq {
		Username string `json:"username"`
		Mobile   string `json:"mobile"`
		Password string `json:"password"`
	}

	RegisterResp {
		Id       int64  `json:"id"`
		Username string `json:"username"`
	}

	GetVerificationCodeReq {
		Mobile string `json:"mobile"`
	}

	GetVerificationCodeResp {
		ResultCode int    `json:"result_code"`
		Msg        string `json:"msg"`
		VCode      string `json:"vcode"`
	}
)

type userNameExistReq {
	Username string `json:"username"`
}

type userNameExistResp {
	IsExist bool `json:"is_exist"`
}

type JwtToken {
	AccessToken  string `json:"accessToken,omitempty"`
	AccessExpire int64  `json:"accessExpire,omitempty"`
	RefreshAfter int64  `json:"refreshAfter,omitempty"`
}

@server(
	group: user
)
service backend-api {
	@handler ping
	post /user/ping ()
	
	@doc(
		summary: "查看用户名是否唯一"
	)
	@handler userNameExist
	get /user/userNameExist (userNameExistReq) returns (userNameExistResp)
	
	@doc(
		summary: "用户注册"
	)
	@handler register
	post /user/register (RegisterReq)returns (RegisterResp)
	
	@doc(
		summary: "用户登陆"
	)
	@handler login
	post /user/login (LoginReq) returns (LoginResp)
	
	@doc(
		summary: "根据手机号获取验证码"
	)
	@handler getVerificationCode
	post /getVerificationCode (GetVerificationCodeReq) returns (GetVerificationCodeResp)
}

type Tag {
	TagId   int64  `json:"tag_id"`
	TagName string `json:"tag_name"`
}

type Tool {
	ToolId      int64  `json:"tool_id"`
	Name        string `json:"name"`
	Api         string `json:"api"`
	ApiDescribe string `json:"api_describe"`
	Picture     string `json:"picture"`
	Tags        []*Tag `json:"tags"`
}

type (
	toolsListReq {
		Page     int64 `json:"page"`
		PageSize int64 `json:"page_size"`
	}

	toolsListResp {
		Tools []*Tool `json:"tools"`
	}
)

type (
	toolsListByTagNameReq {
		Page     int64  `json:"page"`
		PageSize int64  `json:"page_size"`
		TagName  string `json:"tag_name"`
	}

	toolsListByTagNameResp {
		Tools []*Tool `json:"tools"`
	}
)

type (
	MorseReq {
		Str string `json:"str"`
	}

	MorseResp {
		MorseStr string `json:"morse_str"`
	}
)

type (
	QrCodeReq {
		Str string `json:"str"`
	}

	QrCodeResp {
		QrCodeStr string `json:"qrcode_str"`
	}
)

type (
	Rgb2HexReq {
		Str string `json:"str"`
	}

	Rgb2HexResp {
		Rgb2HexStr string `json:"rgb2hex_str"`
	}
)

@server(
	jwt: Auth
	group: api
	middleware: Usercheck
)
service backend-api{
	@doc(
		summary: "获取tools列表"
	)
	@handler toolsList
	get /api/v1/tools (toolsListReq) returns (toolsListResp)
	
	@doc(
		summary: "根据标签名称获取tools列表"
	)
	@handler toolsListByTagName
	get /api/v1/toolsByTagName (toolsListByTagNameReq) returns (toolsListByTagNameResp)
	
	@doc(
		summary: "生成morse码"
	)
	@handler morse
	get /api/v1/morse (MorseReq) returns (MorseResp)
	
	@doc(
		summary: "生成二维码"
	)
	@handler qrcode
	get /api/v1/qrcode (QrCodeReq) returns (QrCodeResp)
	
	@doc(
		summary: "rgb转hex"
	)
	@handler rgb2hex
	get /api/v1/rgb2hex (Rgb2HexReq) returns (Rgb2HexResp)
}