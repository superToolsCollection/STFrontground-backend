// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./user_mock.go -package userclient -source $GOFILE

package userclient

import (
	"context"

	"STFrontground-backend/rpc/user/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	UserInfoResp = user.UserInfoResp
	LoginReq     = user.LoginReq
	LoginResp    = user.LoginResp
	RegisterReq  = user.RegisterReq
	RegisterResp = user.RegisterResp
	UserInfoReq  = user.UserInfoReq

	User interface {
		Login(ctx context.Context, in *LoginReq) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq) (*RegisterResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq) (*UserInfoResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoReq) (*UserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in)
}
